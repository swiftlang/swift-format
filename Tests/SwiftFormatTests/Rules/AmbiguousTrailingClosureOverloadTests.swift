@_spi(Rules) import SwiftFormat
import _SwiftFormatTestSupport

final class AmbiguousTrailingClosureOverloadTests: LintOrFormatRuleTestCase {
  func testAmbiguousOverloads() {
    assertLint(
      AmbiguousTrailingClosureOverload.self,
      """
      func 1Ô∏è‚É£strong(mad: () -> Int) {}
      func 2Ô∏è‚É£strong(bad: (Bool) -> Bool) {}
      func 3Ô∏è‚É£strong(sad: (String) -> Bool) {}

      class A {
        static func 4Ô∏è‚É£the(cheat: (Int) -> Void) {}
        class func 5Ô∏è‚É£the(sneak: (Int) -> Void) {}
        func 6Ô∏è‚É£the(kingOfTown: () -> Void) {}
        func 7Ô∏è‚É£the(cheatCommandos: (Bool) -> Void) {}
        func 8Ô∏è‚É£the(brothersStrong: (String) -> Void) {}
      }

      struct B {
        func 9Ô∏è‚É£hom(estar: () -> Int) {}
        func üîühom(sar: () -> Bool) {}

        static func baleeted(_ f: () -> Void) {}
        func baleeted(_ f: () -> Void) {}
      }
      """,
      findings: [
        FindingSpec(
          "1Ô∏è‚É£",
          message: "rename 'strong(mad:)' so it is no longer ambiguous when called with a trailing closure",
          notes: [
            NoteSpec("2Ô∏è‚É£", message: "ambiguous overload 'strong(bad:)' is here"),
            NoteSpec("3Ô∏è‚É£", message: "ambiguous overload 'strong(sad:)' is here"),
          ]
        ),
        FindingSpec(
          "4Ô∏è‚É£",
          message: "rename 'the(cheat:)' so it is no longer ambiguous when called with a trailing closure",
          notes: [
            NoteSpec("5Ô∏è‚É£", message: "ambiguous overload 'the(sneak:)' is here")
          ]
        ),
        FindingSpec(
          "6Ô∏è‚É£",
          message: "rename 'the(kingOfTown:)' so it is no longer ambiguous when called with a trailing closure",
          notes: [
            NoteSpec("7Ô∏è‚É£", message: "ambiguous overload 'the(cheatCommandos:)' is here"),
            NoteSpec("8Ô∏è‚É£", message: "ambiguous overload 'the(brothersStrong:)' is here"),
          ]
        ),
        FindingSpec(
          "9Ô∏è‚É£",
          message: "rename 'hom(estar:)' so it is no longer ambiguous when called with a trailing closure",
          notes: [
            NoteSpec("üîü", message: "ambiguous overload 'hom(sar:)' is here")
          ]
        ),
      ]
    )
  }
}
