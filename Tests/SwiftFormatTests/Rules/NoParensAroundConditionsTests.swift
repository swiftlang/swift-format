@_spi(Rules) import SwiftFormat
import _SwiftFormatTestSupport

final class NoParensAroundConditionsTests: LintOrFormatRuleTestCase {
  func testParensAroundConditions() {
    assertFormatting(
      NoParensAroundConditions.self,
      input: """
        if 1Ô∏è‚É£(x) {}
        while 2Ô∏è‚É£(x) {}
        guard 3Ô∏è‚É£(x), 4Ô∏è‚É£(y), 5Ô∏è‚É£(x == 3) else {}
        if (foo { x }) {}
        repeat {} while6Ô∏è‚É£(x)
        switch 7Ô∏è‚É£(4) { default: break }
        """,
      expected: """
        if x {}
        while x {}
        guard x, y, x == 3 else {}
        if (foo { x }) {}
        repeat {} while x
        switch 4 { default: break }
        """,
      findings: [
        FindingSpec("1Ô∏è‚É£", message: "remove the parentheses around this expression"),
        FindingSpec("2Ô∏è‚É£", message: "remove the parentheses around this expression"),
        FindingSpec("3Ô∏è‚É£", message: "remove the parentheses around this expression"),
        FindingSpec("4Ô∏è‚É£", message: "remove the parentheses around this expression"),
        FindingSpec("5Ô∏è‚É£", message: "remove the parentheses around this expression"),
        FindingSpec("6Ô∏è‚É£", message: "remove the parentheses around this expression"),
        FindingSpec("7Ô∏è‚É£", message: "remove the parentheses around this expression"),
      ]
    )
  }

  func testParensAroundNestedParenthesizedStatements() {
    assertFormatting(
      NoParensAroundConditions.self,
      input: """
        switch 1Ô∏è‚É£(a) {
          case 1:
            switch 2Ô∏è‚É£(b) {
              default: break
            }
        }
        if 3Ô∏è‚É£(x) {
          if 4Ô∏è‚É£(y) {
          } else if 5Ô∏è‚É£(z) {
          } else {
          }
        } else if 6Ô∏è‚É£(w) {
        }
        """,
      expected: """
        switch a {
          case 1:
            switch b {
              default: break
            }
        }
        if x {
          if y {
          } else if z {
          } else {
          }
        } else if w {
        }
        """,
      findings: [
        FindingSpec("1Ô∏è‚É£", message: "remove the parentheses around this expression"),
        FindingSpec("2Ô∏è‚É£", message: "remove the parentheses around this expression"),
        FindingSpec("3Ô∏è‚É£", message: "remove the parentheses around this expression"),
        FindingSpec("4Ô∏è‚É£", message: "remove the parentheses around this expression"),
        FindingSpec("5Ô∏è‚É£", message: "remove the parentheses around this expression"),
        FindingSpec("6Ô∏è‚É£", message: "remove the parentheses around this expression"),
      ]
    )

    assertFormatting(
      NoParensAroundConditions.self,
      input: """
        while 1Ô∏è‚É£(x) {
          while 2Ô∏è‚É£(y) {}
        }
        guard 3Ô∏è‚É£(x), 4Ô∏è‚É£(y), 5Ô∏è‚É£(x == 3) else {
          guard 6Ô∏è‚É£(a), 7Ô∏è‚É£(b), 8Ô∏è‚É£(c == x) else {
            return
          }
          return
        }
        repeat {
          repeat {
          } while 9Ô∏è‚É£(y)
        } whileüîü(x)
        if 0Ô∏è‚É£(foo.someCall({ if ‚ÑπÔ∏è(x) {} })) {}
        """,
      expected: """
        while x {
          while y {}
        }
        guard x, y, x == 3 else {
          guard a, b, c == x else {
            return
          }
          return
        }
        repeat {
          repeat {
          } while y
        } while x
        if foo.someCall({ if x {} }) {}
        """,
      findings: [
        FindingSpec("1Ô∏è‚É£", message: "remove the parentheses around this expression"),
        FindingSpec("2Ô∏è‚É£", message: "remove the parentheses around this expression"),
        FindingSpec("3Ô∏è‚É£", message: "remove the parentheses around this expression"),
        FindingSpec("4Ô∏è‚É£", message: "remove the parentheses around this expression"),
        FindingSpec("5Ô∏è‚É£", message: "remove the parentheses around this expression"),
        FindingSpec("6Ô∏è‚É£", message: "remove the parentheses around this expression"),
        FindingSpec("7Ô∏è‚É£", message: "remove the parentheses around this expression"),
        FindingSpec("8Ô∏è‚É£", message: "remove the parentheses around this expression"),
        FindingSpec("9Ô∏è‚É£", message: "remove the parentheses around this expression"),
        FindingSpec("üîü", message: "remove the parentheses around this expression"),
        FindingSpec("0Ô∏è‚É£", message: "remove the parentheses around this expression"),
        FindingSpec("‚ÑπÔ∏è", message: "remove the parentheses around this expression"),
      ]
    )
  }

  func testParensAroundNestedUnparenthesizedStatements() {
    assertFormatting(
      NoParensAroundConditions.self,
      input: """
        switch b {
          case 2:
            switch 1Ô∏è‚É£(d) {
              default: break
            }
        }
        if x {
          if 2Ô∏è‚É£(y) {
          } else if 3Ô∏è‚É£(z) {
          } else {
          }
        } else if 4Ô∏è‚É£(w) {
        }
        while x {
          while 5Ô∏è‚É£(y) {}
        }
        repeat {
          repeat {
          } while 6Ô∏è‚É£(y)
        } while x
        if foo.someCall({ if 7Ô∏è‚É£(x) {} }) {}
        """,
      expected: """
        switch b {
          case 2:
            switch d {
              default: break
            }
        }
        if x {
          if y {
          } else if z {
          } else {
          }
        } else if w {
        }
        while x {
          while y {}
        }
        repeat {
          repeat {
          } while y
        } while x
        if foo.someCall({ if x {} }) {}
        """,
      findings: [
        FindingSpec("1Ô∏è‚É£", message: "remove the parentheses around this expression"),
        FindingSpec("2Ô∏è‚É£", message: "remove the parentheses around this expression"),
        FindingSpec("3Ô∏è‚É£", message: "remove the parentheses around this expression"),
        FindingSpec("4Ô∏è‚É£", message: "remove the parentheses around this expression"),
        FindingSpec("5Ô∏è‚É£", message: "remove the parentheses around this expression"),
        FindingSpec("6Ô∏è‚É£", message: "remove the parentheses around this expression"),
        FindingSpec("7Ô∏è‚É£", message: "remove the parentheses around this expression"),
      ]
    )
  }

  func testParensAroundIfAndSwitchExprs() {
    assertFormatting(
      NoParensAroundConditions.self,
      input: """
        let x = if 1Ô∏è‚É£(x) {}
        let y = switch 2Ô∏è‚É£(4) { default: break }
        func foo() {
          return if 3Ô∏è‚É£(x) {}
        }
        func bar() {
          return switch 4Ô∏è‚É£(4) { default: break }
        }
        """,
      expected: """
        let x = if x {}
        let y = switch 4 { default: break }
        func foo() {
          return if x {}
        }
        func bar() {
          return switch 4 { default: break }
        }
        """,
      findings: [
        FindingSpec("1Ô∏è‚É£", message: "remove the parentheses around this expression"),
        FindingSpec("2Ô∏è‚É£", message: "remove the parentheses around this expression"),
        FindingSpec("3Ô∏è‚É£", message: "remove the parentheses around this expression"),
        FindingSpec("4Ô∏è‚É£", message: "remove the parentheses around this expression"),
      ]
    )
  }

  func testParensAroundAmbiguousConditions() {
    assertFormatting(
      NoParensAroundConditions.self,
      input: """
        if ({ true }()) {}
        if (functionWithTrailingClosure { 5 }) {}
        """,
      expected: """
        if ({ true }()) {}
        if (functionWithTrailingClosure { 5 }) {}
        """,
      findings: []
    )
  }

  func testKeywordAlwaysHasTrailingSpace() {
    assertFormatting(
      NoParensAroundConditions.self,
      input: """
        if1Ô∏è‚É£(x) {}
        while2Ô∏è‚É£(x) {}
        guard3Ô∏è‚É£(x),4Ô∏è‚É£(y),5Ô∏è‚É£(x == 3) else {}
        repeat {} while6Ô∏è‚É£(x)
        switch7Ô∏è‚É£(4) { default: break }
        """,
      expected: """
        if x {}
        while x {}
        guard x,y,x == 3 else {}
        repeat {} while x
        switch 4 { default: break }
        """,
      findings: [
        FindingSpec("1Ô∏è‚É£", message: "remove the parentheses around this expression"),
        FindingSpec("2Ô∏è‚É£", message: "remove the parentheses around this expression"),
        FindingSpec("3Ô∏è‚É£", message: "remove the parentheses around this expression"),
        FindingSpec("4Ô∏è‚É£", message: "remove the parentheses around this expression"),
        FindingSpec("5Ô∏è‚É£", message: "remove the parentheses around this expression"),
        FindingSpec("6Ô∏è‚É£", message: "remove the parentheses around this expression"),
        FindingSpec("7Ô∏è‚É£", message: "remove the parentheses around this expression"),
      ]
    )
  }

  func testBlockCommentsBeforeConditionArePreserved() {
    assertFormatting(
      NoParensAroundConditions.self,
      input: """
        if/*foo*/1Ô∏è‚É£(x) {}
        while/*foo*/2Ô∏è‚É£(x) {}
        guard/*foo*/3Ô∏è‚É£(x), /*foo*/4Ô∏è‚É£(y), /*foo*/5Ô∏è‚É£(x == 3) else {}
        repeat {} while/*foo*/6Ô∏è‚É£(x)
        switch/*foo*/7Ô∏è‚É£(4) { default: break }
        """,
      expected: """
        if/*foo*/x {}
        while/*foo*/x {}
        guard/*foo*/x, /*foo*/y, /*foo*/x == 3 else {}
        repeat {} while/*foo*/x
        switch/*foo*/4 { default: break }
        """,
      findings: [
        FindingSpec("1Ô∏è‚É£", message: "remove the parentheses around this expression"),
        FindingSpec("2Ô∏è‚É£", message: "remove the parentheses around this expression"),
        FindingSpec("3Ô∏è‚É£", message: "remove the parentheses around this expression"),
        FindingSpec("4Ô∏è‚É£", message: "remove the parentheses around this expression"),
        FindingSpec("5Ô∏è‚É£", message: "remove the parentheses around this expression"),
        FindingSpec("6Ô∏è‚É£", message: "remove the parentheses around this expression"),
        FindingSpec("7Ô∏è‚É£", message: "remove the parentheses around this expression"),
      ]
    )
  }

  func testCommentsAfterKeywordArePreserved() {
    assertFormatting(
      NoParensAroundConditions.self,
      input: """
        if /*foo*/ // bar
          1Ô∏è‚É£(x) {}
        while /*foo*/ // bar
          2Ô∏è‚É£(x) {}
        guard /*foo*/ // bar
          3Ô∏è‚É£(x), /*foo*/ // bar
          4Ô∏è‚É£(y), /*foo*/ // bar
          5Ô∏è‚É£(x == 3) else {}
        repeat {} while /*foo*/ // bar
          6Ô∏è‚É£(x)
        switch /*foo*/ // bar
          7Ô∏è‚É£(4) { default: break }
        """,
      expected: """
        if /*foo*/ // bar
          x {}
        while /*foo*/ // bar
          x {}
        guard /*foo*/ // bar
          x, /*foo*/ // bar
          y, /*foo*/ // bar
          x == 3 else {}
        repeat {} while /*foo*/ // bar
          x
        switch /*foo*/ // bar
          4 { default: break }
        """,
      findings: [
        FindingSpec("1Ô∏è‚É£", message: "remove the parentheses around this expression"),
        FindingSpec("2Ô∏è‚É£", message: "remove the parentheses around this expression"),
        FindingSpec("3Ô∏è‚É£", message: "remove the parentheses around this expression"),
        FindingSpec("4Ô∏è‚É£", message: "remove the parentheses around this expression"),
        FindingSpec("5Ô∏è‚É£", message: "remove the parentheses around this expression"),
        FindingSpec("6Ô∏è‚É£", message: "remove the parentheses around this expression"),
        FindingSpec("7Ô∏è‚É£", message: "remove the parentheses around this expression"),
      ]
    )
  }
}
