@_spi(Rules) import SwiftFormat
import _SwiftFormatTestSupport

final class ReturnVoidInsteadOfEmptyTupleTests: LintOrFormatRuleTestCase {
  func testBasic() {
    assertFormatting(
      ReturnVoidInsteadOfEmptyTuple.self,
      input: """
        let callback: () -> 1Ô∏è‚É£()
        typealias x = Int -> 2Ô∏è‚É£()
        func y() -> Int -> 3Ô∏è‚É£() { return }
        func z(d: Bool -> 4Ô∏è‚É£()) {}
        """,
      expected: """
        let callback: () -> Void
        typealias x = Int -> Void
        func y() -> Int -> Void { return }
        func z(d: Bool -> Void) {}
        """,
      findings: [
        FindingSpec("1Ô∏è‚É£", message: "replace '()' with 'Void'"),
        FindingSpec("2Ô∏è‚É£", message: "replace '()' with 'Void'"),
        FindingSpec("3Ô∏è‚É£", message: "replace '()' with 'Void'"),
        FindingSpec("4Ô∏è‚É£", message: "replace '()' with 'Void'"),
      ]
    )
  }

  func testNestedFunctionTypes() {
    assertFormatting(
      ReturnVoidInsteadOfEmptyTuple.self,
      input: """
        typealias Nested1 = (() -> 1Ô∏è‚É£()) -> Int
        typealias Nested2 = (() -> 2Ô∏è‚É£()) -> 3Ô∏è‚É£()
        typealias Nested3 = Int -> (() -> 4Ô∏è‚É£())
        """,
      expected: """
        typealias Nested1 = (() -> Void) -> Int
        typealias Nested2 = (() -> Void) -> Void
        typealias Nested3 = Int -> (() -> Void)
        """,
      findings: [
        FindingSpec("1Ô∏è‚É£", message: "replace '()' with 'Void'"),
        FindingSpec("2Ô∏è‚É£", message: "replace '()' with 'Void'"),
        FindingSpec("3Ô∏è‚É£", message: "replace '()' with 'Void'"),
        FindingSpec("4Ô∏è‚É£", message: "replace '()' with 'Void'"),
      ]
    )
  }

  func testClosureSignatures() {
    assertFormatting(
      ReturnVoidInsteadOfEmptyTuple.self,
      input: """
        callWithTrailingClosure(arg) { arg -> 1Ô∏è‚É£() in body }
        callWithTrailingClosure(arg) { arg -> 2Ô∏è‚É£() in
          nestedCallWithTrailingClosure(arg) { arg -> 3Ô∏è‚É£() in
            body
          }
        }
        callWithTrailingClosure(arg) { (arg: () -> 4Ô∏è‚É£()) -> Int in body }
        callWithTrailingClosure(arg) { (arg: () -> 5Ô∏è‚É£()) -> 6Ô∏è‚É£() in body }
        """,
      expected: """
        callWithTrailingClosure(arg) { arg -> Void in body }
        callWithTrailingClosure(arg) { arg -> Void in
          nestedCallWithTrailingClosure(arg) { arg -> Void in
            body
          }
        }
        callWithTrailingClosure(arg) { (arg: () -> Void) -> Int in body }
        callWithTrailingClosure(arg) { (arg: () -> Void) -> Void in body }
        """,
      findings: [
        FindingSpec("1Ô∏è‚É£", message: "replace '()' with 'Void'"),
        FindingSpec("2Ô∏è‚É£", message: "replace '()' with 'Void'"),
        FindingSpec("3Ô∏è‚É£", message: "replace '()' with 'Void'"),
        FindingSpec("4Ô∏è‚É£", message: "replace '()' with 'Void'"),
        FindingSpec("5Ô∏è‚É£", message: "replace '()' with 'Void'"),
        FindingSpec("6Ô∏è‚É£", message: "replace '()' with 'Void'"),
      ]
    )
  }

  func testTriviaPreservation() {
    assertFormatting(
      ReturnVoidInsteadOfEmptyTuple.self,
      input: """
        let callback: () -> /*foo*/1Ô∏è‚É£()/*bar*/
        let callback: ((Int) ->   /*foo*/   2Ô∏è‚É£()   /*bar*/) -> 3Ô∏è‚É£()
        """,
      expected: """
        let callback: () -> /*foo*/Void/*bar*/
        let callback: ((Int) ->   /*foo*/   Void   /*bar*/) -> Void
        """,
      findings: [
        FindingSpec("1Ô∏è‚É£", message: "replace '()' with 'Void'"),
        FindingSpec("2Ô∏è‚É£", message: "replace '()' with 'Void'"),
        FindingSpec("3Ô∏è‚É£", message: "replace '()' with 'Void'"),
      ]
    )
  }

  func testEmptyTupleWithInternalCommentsIsDiagnosedButNotReplaced() {
    assertFormatting(
      ReturnVoidInsteadOfEmptyTuple.self,
      input: """
        let callback: () -> 1Ô∏è‚É£( )
        let callback: () -> 2Ô∏è‚É£(\t)
        let callback: () -> 3Ô∏è‚É£(
        )
        let callback: () -> 4Ô∏è‚É£( /* please don't change me! */ )
        let callback: () -> 5Ô∏è‚É£( /** please don't change me! */ )
        let callback: () -> 6Ô∏è‚É£(
          // don't change me either!
        )
        let callback: () -> 7Ô∏è‚É£(
          /// don't change me either!
        )
        let callback: () -> 8Ô∏è‚É£(\u{feff})

        let callback: (() -> 9Ô∏è‚É£()) -> üîü( /* please don't change me! */ )
        callWithTrailingClosure(arg) { (arg: () -> 0Ô∏è‚É£()) -> ‚ÑπÔ∏è( /* no change */ ) in body }
        """,
      expected: """
        let callback: () -> Void
        let callback: () -> Void
        let callback: () -> Void
        let callback: () -> ( /* please don't change me! */ )
        let callback: () -> ( /** please don't change me! */ )
        let callback: () -> (
          // don't change me either!
        )
        let callback: () -> (
          /// don't change me either!
        )
        let callback: () -> (\u{feff})

        let callback: (() -> Void) -> ( /* please don't change me! */ )
        callWithTrailingClosure(arg) { (arg: () -> Void) -> ( /* no change */ ) in body }
        """,
      findings: [
        FindingSpec("1Ô∏è‚É£", message: "replace '()' with 'Void'"),
        FindingSpec("2Ô∏è‚É£", message: "replace '()' with 'Void'"),
        FindingSpec("3Ô∏è‚É£", message: "replace '()' with 'Void'"),
        FindingSpec("4Ô∏è‚É£", message: "replace '()' with 'Void'"),
        FindingSpec("5Ô∏è‚É£", message: "replace '()' with 'Void'"),
        FindingSpec("6Ô∏è‚É£", message: "replace '()' with 'Void'"),
        FindingSpec("7Ô∏è‚É£", message: "replace '()' with 'Void'"),
        FindingSpec("8Ô∏è‚É£", message: "replace '()' with 'Void'"),
        FindingSpec("9Ô∏è‚É£", message: "replace '()' with 'Void'"),
        FindingSpec("üîü", message: "replace '()' with 'Void'"),
        FindingSpec("0Ô∏è‚É£", message: "replace '()' with 'Void'"),
        FindingSpec("‚ÑπÔ∏è", message: "replace '()' with 'Void'"),
      ]
    )
  }
}
