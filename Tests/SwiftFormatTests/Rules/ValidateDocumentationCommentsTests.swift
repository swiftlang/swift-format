@_spi(Rules) import SwiftFormat
import _SwiftFormatTestSupport

// FIXME: Diagnostics should be emitted inside the comment, not at the beginning of the declaration.
final class ValidateDocumentationCommentsTests: LintOrFormatRuleTestCase {
  func testParameterDocumentation() {
    assertFormatting(
      ValidateDocumentationComments.self,
      input: """
        /// Uses 'Parameters' when it only has one parameter.
        ///
        /// - Parameters:
        ///   - singular: singular description.
        /// - Returns: A string containing the contents of a
        ///   description
        1️⃣func testPluralParamDesc(singular: String) -> Bool {}

        /// Returns the output generated by executing a command with the given string
        /// used as standard input.
        ///
        /// - Parameter command: The command to execute in the shell environment.
        /// - Parameter stdin: The string to use as standard input.
        /// - Returns: A string containing the contents of the invoked process's
        ///   standard output.
        2️⃣func testInvalidParameterDesc(command: String, stdin: String) -> String {}

        struct Greeting {
          /// Creates a new greeting in the default language.
          /// 
          /// You can create a greeting with an optional name.
          ///
          /// - Parameters:
          ///   - name: An optional name to greet. If `name` is `nil`,
          ///     a placeholder name is used instead.
          3️⃣init(name: String? = nil) {}

          /// Creates a new greeting.
          /// 
          /// You can create a greeting with a language and, optionally, a name.
          ///
          /// - Parameter language: The language to greet in.
          /// - Parameter name: An optional name to greet. If `name` is `nil`,
          ///   a placeholder name is used instead.
          4️⃣init(language: Language, name: String? = nil) {}
        }
        """,
      expected: """
        /// Uses 'Parameters' when it only has one parameter.
        ///
        /// - Parameter singular: singular description.
        /// - Returns: A string containing the contents of a
        ///   description
        func testPluralParamDesc(singular: String) -> Bool {}

        /// Returns the output generated by executing a command with the given string
        /// used as standard input.
        ///
        /// - Parameters:
        ///   - command: The command to execute in the shell environment.
        ///   - stdin: The string to use as standard input.
        /// - Returns: A string containing the contents of the invoked process's
        ///   standard output.
        func testInvalidParameterDesc(command: String, stdin: String) -> String {}

        struct Greeting {
          /// Creates a new greeting in the default language.
          /// 
          /// You can create a greeting with an optional name.
          ///
          /// - Parameter name: An optional name to greet. If `name` is `nil`,
          ///     a placeholder name is used instead.
          init(name: String? = nil) {}

          /// Creates a new greeting.
          /// 
          /// You can create a greeting with a language and, optionally, a name.
          ///
          /// - Parameters:
          ///   - language: The language to greet in.
          ///   - name: An optional name to greet. If `name` is `nil`,
          ///   a placeholder name is used instead.
          init(language: Language, name: String? = nil) {}
        }
        """,
      findings: [
        FindingSpec(
          "1️⃣",
          message: "replace the plural 'Parameters:' section with a singular inline 'Parameter' section"
        ),
        FindingSpec(
          "2️⃣",
          message:
            "replace the singular inline 'Parameter' section with a plural 'Parameters:' section that has the parameters nested inside it"
        ),
        FindingSpec(
          "3️⃣",
          message: "replace the plural 'Parameters:' section with a singular inline 'Parameter' section"
        ),
        FindingSpec(
          "4️⃣",
          message:
            "replace the singular inline 'Parameter' section with a plural 'Parameters:' section that has the parameters nested inside it"
        ),
      ]
    )
  }

  func testParametersName() {
    assertFormatting(
      ValidateDocumentationComments.self,
      input: """
        /// Parameters dont match.
        ///
        /// - Parameters:
        ///   - sum: The sum of all numbers.
        ///   - avg: The average of all numbers.
        /// - Returns: The sum of sum and avg.
        1️⃣func sum(avg: Int, sum: Int) -> Int {}

        /// Missing one parameter documentation.
        ///
        /// - Parameters:
        ///   - p1: Parameter 1.
        ///   - p2: Parameter 2.
        /// - Returns: an integer.
        2️⃣func foo(p1: Int, p2: Int, p3: Int) -> Int {}
        """,
      expected: """
        /// Parameters dont match.
        ///
        /// - Parameters:
        ///   - sum: The sum of all numbers.
        ///   - avg: The average of all numbers.
        /// - Returns: The sum of sum and avg.
        func sum(avg: Int, sum: Int) -> Int {}

        /// Missing one parameter documentation.
        ///
        /// - Parameters:
        ///   - p1: Parameter 1.
        ///   - p2: Parameter 2.
        /// - Returns: an integer.
        func foo(p1: Int, p2: Int, p3: Int) -> Int {}
        """,
      findings: [
        FindingSpec("1️⃣", message: "change the parameters of the documentation of 'sum' to match its parameters"),
        FindingSpec("2️⃣", message: "change the parameters of the documentation of 'foo' to match its parameters"),
      ]
    )
  }

  func testThrowsDocumentation() {
    assertFormatting(
      ValidateDocumentationComments.self,
      input: """
        /// One sentence summary.
        ///
        /// - Parameters:
        ///   - p1: Parameter 1.
        ///   - p2: Parameter 2.
        ///   - p3: Parameter 3.
        /// - Throws: an error.
        1️⃣func doesNotThrow(p1: Int, p2: Int, p3: Int) {}

        /// One sentence summary.
        ///
        /// - Parameters:
        ///   - p1: Parameter 1.
        ///   - p2: Parameter 2.
        ///   - p3: Parameter 3.
        func doesThrow(p1: Int, p2: Int, p3: Int) 2️⃣throws {}

        /// One sentence summary.
        ///
        /// - Parameter p1: Parameter 1.
        /// - Throws: doesn't really throw, just rethrows
        func doesRethrow(p1: (() throws -> ())) 3️⃣rethrows {}
        """,
      expected: """
        /// One sentence summary.
        ///
        /// - Parameters:
        ///   - p1: Parameter 1.
        ///   - p2: Parameter 2.
        ///   - p3: Parameter 3.
        /// - Throws: an error.
        func doesNotThrow(p1: Int, p2: Int, p3: Int) {}

        /// One sentence summary.
        ///
        /// - Parameters:
        ///   - p1: Parameter 1.
        ///   - p2: Parameter 2.
        ///   - p3: Parameter 3.
        func doesThrow(p1: Int, p2: Int, p3: Int) throws {}

        /// One sentence summary.
        ///
        /// - Parameter p1: Parameter 1.
        /// - Throws: doesn't really throw, just rethrows
        func doesRethrow(p1: (() throws -> ())) rethrows {}
        """,
      findings: [
        FindingSpec("1️⃣", message: "remove the 'Throws:' sections of 'doesNotThrow'; it does not throw any errors"),
        FindingSpec("2️⃣", message: "add a 'Throws:' section to document the errors thrown by 'doesThrow'"),
      ]
    )
  }

  func testReturnDocumentation() {
    assertFormatting(
      ValidateDocumentationComments.self,
      input: """
        /// One sentence summary.
        ///
        /// - Parameters:
        ///   - p1: Parameter 1.
        ///   - p2: Parameter 2.
        ///   - p3: Parameter 3.
        /// - Returns: an integer.
        1️⃣func noReturn(p1: Int, p2: Int, p3: Int) {}

        /// One sentence summary.
        ///
        /// - Parameters:
        ///   - p1: Parameter 1.
        ///   - p2: Parameter 2.
        ///   - p3: Parameter 3.
        func foo(p1: Int, p2: Int, p3: Int) 2️⃣-> Int {}

        /// One sentence summary.
        ///
        /// - Parameters:
        ///   - p1: Parameter 1.
        ///   - p2: Parameter 2.
        ///   - p3: Parameter 3.
        func neverReturns(p1: Int, p2: Int, p3: Int) -> Never {}

        /// One sentence summary.
        ///
        /// - Parameters:
        ///   - p1: Parameter 1.
        ///   - p2: Parameter 2.
        ///   - p3: Parameter 3.
        /// - Returns: Never returns.
        func documentedNeverReturns(p1: Int, p2: Int, p3: Int) -> Never {}
        """,
      expected: """
        /// One sentence summary.
        ///
        /// - Parameters:
        ///   - p1: Parameter 1.
        ///   - p2: Parameter 2.
        ///   - p3: Parameter 3.
        /// - Returns: an integer.
        func noReturn(p1: Int, p2: Int, p3: Int) {}

        /// One sentence summary.
        ///
        /// - Parameters:
        ///   - p1: Parameter 1.
        ///   - p2: Parameter 2.
        ///   - p3: Parameter 3.
        func foo(p1: Int, p2: Int, p3: Int) -> Int {}

        /// One sentence summary.
        ///
        /// - Parameters:
        ///   - p1: Parameter 1.
        ///   - p2: Parameter 2.
        ///   - p3: Parameter 3.
        func neverReturns(p1: Int, p2: Int, p3: Int) -> Never {}

        /// One sentence summary.
        ///
        /// - Parameters:
        ///   - p1: Parameter 1.
        ///   - p2: Parameter 2.
        ///   - p3: Parameter 3.
        /// - Returns: Never returns.
        func documentedNeverReturns(p1: Int, p2: Int, p3: Int) -> Never {}
        """,
      findings: [
        FindingSpec("1️⃣", message: "remove the 'Returns:' section of 'noReturn'; it does not return a value"),
        FindingSpec("2️⃣", message: "add a 'Returns:' section to document the return value of 'foo'"),
      ]
    )
  }

  func testValidDocumentation() {
    assertFormatting(
      ValidateDocumentationComments.self,
      input: """
        /// Returns the output generated by executing a command.
        ///
        /// - Parameter command: The command to execute in the shell environment.
        /// - Returns: A string containing the contents of the invoked process's
        ///   standard output.
        func singularParam(command: String) -> String {
        // ...
        }

        /// Returns the output generated by executing a command with the given string
        /// used as standard input.
        ///
        /// - Parameters:
        ///   - command: The command to execute in the shell environment.
        ///   - stdin: The string to use as standard input.
        /// - Throws: An error, possibly.
        /// - Returns: A string containing the contents of the invoked process's
        ///   standard output.
        func pluralParam(command: String, stdin: String) throws -> String {
        // ...
        }

        /// One sentence summary.
        ///
        /// - Parameter p1: Parameter 1.
        func rethrower(p1: (() throws -> ())) rethrows {
        // ...
        }

        /// Parameter(s) and Returns tags may be omitted only if the single-sentence
        /// brief summary fully describes the meaning of those items and including the
        /// tags would only repeat what has already been said
        func omittedFunc(p1: Int)
        """,
      expected: """
        /// Returns the output generated by executing a command.
        ///
        /// - Parameter command: The command to execute in the shell environment.
        /// - Returns: A string containing the contents of the invoked process's
        ///   standard output.
        func singularParam(command: String) -> String {
        // ...
        }

        /// Returns the output generated by executing a command with the given string
        /// used as standard input.
        ///
        /// - Parameters:
        ///   - command: The command to execute in the shell environment.
        ///   - stdin: The string to use as standard input.
        /// - Throws: An error, possibly.
        /// - Returns: A string containing the contents of the invoked process's
        ///   standard output.
        func pluralParam(command: String, stdin: String) throws -> String {
        // ...
        }

        /// One sentence summary.
        ///
        /// - Parameter p1: Parameter 1.
        func rethrower(p1: (() throws -> ())) rethrows {
        // ...
        }

        /// Parameter(s) and Returns tags may be omitted only if the single-sentence
        /// brief summary fully describes the meaning of those items and including the
        /// tags would only repeat what has already been said
        func omittedFunc(p1: Int)
        """,
      findings: []
    )
  }

  func testSeparateLabelAndIdentifier() {
    assertFormatting(
      ValidateDocumentationComments.self,
      input: """
        /// Returns the output generated by executing a command.
        ///
        /// - Parameter command: The command to execute in the shell environment.
        /// - Returns: A string containing the contents of the invoked process's
        ///   standard output.
        1️⃣func incorrectParam(label commando: String) -> String {
        // ...
        }

        /// Returns the output generated by executing a command.
        ///
        /// - Parameter command: The command to execute in the shell environment.
        /// - Returns: A string containing the contents of the invoked process's
        ///   standard output.
        func singularParam(label command: String) -> String {
        // ...
        }

        /// Returns the output generated by executing a command with the given string
        /// used as standard input.
        ///
        /// - Parameters:
        ///   - command: The command to execute in the shell environment.
        ///   - stdin: The string to use as standard input.
        /// - Returns: A string containing the contents of the invoked process's
        ///   standard output.
        func pluralParam(label command: String, label2 stdin: String) -> String {
        // ...
        }
        """,
      expected: """
        /// Returns the output generated by executing a command.
        ///
        /// - Parameter command: The command to execute in the shell environment.
        /// - Returns: A string containing the contents of the invoked process's
        ///   standard output.
        func incorrectParam(label commando: String) -> String {
        // ...
        }

        /// Returns the output generated by executing a command.
        ///
        /// - Parameter command: The command to execute in the shell environment.
        /// - Returns: A string containing the contents of the invoked process's
        ///   standard output.
        func singularParam(label command: String) -> String {
        // ...
        }

        /// Returns the output generated by executing a command with the given string
        /// used as standard input.
        ///
        /// - Parameters:
        ///   - command: The command to execute in the shell environment.
        ///   - stdin: The string to use as standard input.
        /// - Returns: A string containing the contents of the invoked process's
        ///   standard output.
        func pluralParam(label command: String, label2 stdin: String) -> String {
        // ...
        }
        """,
      findings: [
        FindingSpec(
          "1️⃣",
          message: "change the parameters of the documentation of 'incorrectParam' to match its parameters"
        )
      ]
    )
  }

  func testInitializer() {
    assertFormatting(
      ValidateDocumentationComments.self,
      input: """
        struct SomeType {
          /// Brief summary.
          ///
          /// - Parameter command: The command to execute in the shell environment.
          /// - Returns: Shouldn't be here.
          1️⃣2️⃣init(label commando: String) {
          // ...
          }

          /// Brief summary.
          ///
          /// - Parameter command: The command to execute in the shell environment.
          init(label command: String) {
          // ...
          }

          /// Brief summary.
          ///
          /// - Parameters:
          ///   - command: The command to execute in the shell environment.
          ///   - stdin: The string to use as standard input.
          init(label command: String, label2 stdin: String) {
          // ...
          }

          /// Brief summary.
          ///
          /// - Parameters:
          ///   - command: The command to execute in the shell environment.
          ///   - stdin: The string to use as standard input.
          /// - Throws: An error.
          init(label command: String, label2 stdin: String) throws {
          // ...
          }
        }
        """,
      expected: """
        struct SomeType {
          /// Brief summary.
          ///
          /// - Parameter command: The command to execute in the shell environment.
          /// - Returns: Shouldn't be here.
          init(label commando: String) {
          // ...
          }

          /// Brief summary.
          ///
          /// - Parameter command: The command to execute in the shell environment.
          init(label command: String) {
          // ...
          }

          /// Brief summary.
          ///
          /// - Parameters:
          ///   - command: The command to execute in the shell environment.
          ///   - stdin: The string to use as standard input.
          init(label command: String, label2 stdin: String) {
          // ...
          }

          /// Brief summary.
          ///
          /// - Parameters:
          ///   - command: The command to execute in the shell environment.
          ///   - stdin: The string to use as standard input.
          /// - Throws: An error.
          init(label command: String, label2 stdin: String) throws {
          // ...
          }
        }
        """,
      findings: [
        FindingSpec("1️⃣", message: "remove the 'Returns:' section of 'init'; it does not return a value"),
        FindingSpec("2️⃣", message: "change the parameters of the documentation of 'init' to match its parameters"),
      ]
    )
  }
}
