name: Publish Release

on:
  workflow_dispatch:
    inputs:
      prerelease:
        type: boolean
        description: "Prerelease"
        # Whether to create a prerelease or proper release
        default: true
        required: true
      swift_format_version:
        type: string
        default: 601.0.0
        description: "swift-format version"
        # The version of swift-format to tag. If this is a prerelease, `-prerelease-<date>` is added to this version.
        required: true
      swift_syntax_tag:
        type: string
        default: 601.0.0
        description: "swift-syntax version"
        # The swift-syntax version to depend on. If this is a prerelease, the latest swift-syntax prerelease tag for this version is used.
        required: true

jobs:
  check_triggering_actor:
    name: Check user is allowed to create release
    # Only a single user should be allowed to create releases to avoid two people triggering the creation of a release
    # at the same time. If the release manager changes between users, update this condition.
    runs-on: ubuntu-latest
    steps:
      - run: |
          if [[ "${{ github.triggering_actor }}" != "ahoppen" ]]; then
            echo "${{ github.triggering_actor }} is not allowed to create a release"
            exit 1
          fi
  create_release_commits:
    name: Create release commits
    runs-on: ubuntu-latest
    outputs:
      swift_format_version: ${{ steps.swift_format_version.outputs.swift_format_version }}
      release_commit_patch: ${{ steps.create_release_commits.outputs.release_commit_patch }}
    steps:
      - name: Determine swift-syntax tag to depend on
        id: swift_syntax_tag
        shell: bash
        run: |
          if [[ "${{ github.event.inputs.prerelease }}" == "false" ]]; then
            SWIFT_SYNTAX_TAG="${{ github.event.inputs.swift_syntax_tag }}"
          else
            git clone https://github.com/swiftlang/swift-syntax.git
            cd swift-syntax
            SWIFT_SYNTAX_TAG="$(git tag | grep ${{ github.event.inputs.swift_syntax_tag }}-prerelease | sort -r | head -1)"
          fi

          echo "Using swift-syntax tag: $SWIFT_SYNTAX_TAG"
          echo "swift_syntax_tag=$SWIFT_SYNTAX_TAG" >> "$GITHUB_OUTPUT"
      - name: Determine swift-format prerelease version
        id: swift_format_version
        run: |
          if [[ "${{ github.event.inputs.prerelease }}" == "false" ]]; then
            SWIFT_FORMAT_VERSION="${{ github.event.inputs.swift_format_version }}"
          else
            SWIFT_FORMAT_VERSION="${{ github.event.inputs.swift_format_version }}-prerelease-$(date +'%Y-%m-%d')"
          fi
          echo "Using swift-format version: $SWIFT_FORMAT_VERSION"
          echo "swift_format_version=$SWIFT_FORMAT_VERSION" >> "$GITHUB_OUTPUT"
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Create version commit if version changed
        run: |
          # Without this, we can't perform git operations in GitHub actions.
          git config --global --add safe.directory "$(realpath .)"
          git config --local user.name 'swift-ci'
          git config --local user.email 'swift-ci@users.noreply.github.com'

          BRANCH_NAME="${GITHUB_REF#refs/heads/}"

          sed -E -i "s#print\(\".*\"\)#print\(\"${{ steps.swift_format_version.outputs.swift_format_version }}\"\)#" Sources/swift-format/PrintVersion.swift

          if ! git diff --quiet Sources/swift-format/PrintVersion.swift; then
            echo "Detected change in PrintVersion.swift — committing and pushing"
            git add Sources/swift-format/PrintVersion.swift
            git commit -m "Change version to ${{ steps.swift_format_version.outputs.swift_format_version }}"
            git push origin HEAD:$BRANCH_NAME
          else
            echo "No changes in PrintVersion.swift — skipping commit/push"
          fi
      - name: Create release commits
        id: create_release_commits
        run: |
          # Without this, we can't perform git operations in GitHub actions.
          git config --global --add safe.directory "$(realpath .)"
          git config --local user.name 'swift-ci'
          git config --local user.email 'swift-ci@users.noreply.github.com'

          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          git pull origin "$BRANCH_NAME"
          BASE_COMMIT=$(git rev-parse HEAD)

          sed -E -i "s#branch: \"(main|release/[0-9]+\.[0-9]+)\"#from: \"${{ steps.swift_syntax_tag.outputs.swift_syntax_tag }}\"#" Package.swift
          git add Package.swift
          git commit -m "Change swift-syntax dependency to ${{ steps.swift_syntax_tag.outputs.swift_syntax_tag }}"

          {
            echo 'release_commit_patch<<EOF'
            git format-patch "$BASE_COMMIT"..HEAD --stdout
            echo EOF
          } >> "$GITHUB_OUTPUT"
  test:
    name: Test in ${{ matrix.release && 'Release' || 'Debug' }} configuration
    uses: swiftlang/github-workflows/.github/workflows/swift_package_test.yml@main
    needs: create_release_commits
    strategy:
      fail-fast: false
      matrix:
        release: [true, false]
    with:
      linux_pre_build_command: |
        git config --global --add safe.directory "$(realpath .)"
        git config --local user.name 'swift-ci'
        git config --local user.email 'swift-ci@users.noreply.github.com'
        git am << EOF
        ${{ needs.create_release_commits.outputs.release_commit_patch }}
        EOF
      windows_pre_build_command: |
        git config --local user.name "swift-ci"
        git config --local user.email "swift-ci@users.noreply.github.com"
        echo @"
        ${{ needs.create_release_commits.outputs.release_commit_patch }}
        "@ > $env:TEMP\patch.diff
        # For some reason `git am` fails in Powershell with the following error. Executing it in cmd works...
        # fatal: empty ident name (for <>) not allowed
        cmd /c "type $env:TEMP\patch.diff | git am || (exit /b 1)"
      # We require that releases of swift-format build without warnings
      linux_build_command: swift test -Xswiftc -warnings-as-errors ${{ matrix.release && '-c release' || '' }}
      windows_build_command: swift test -Xswiftc -warnings-as-errors ${{ matrix.release && '-c release' || '' }}
  create_tag:
    name: Create Tag
    runs-on: ubuntu-latest
    needs: [check_triggering_actor, test, create_release_commits]
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Apply release commits
        run: |
          git config --global --add safe.directory "$(realpath .)"
          git config --local user.name 'swift-ci'
          git config --local user.email 'swift-ci@users.noreply.github.com'
          git am << EOF
          ${{ needs.create_release_commits.outputs.release_commit_patch }}
          EOF
      - name: Tag release
        run: |
          git tag "${{ needs.create_release_commits.outputs.swift_format_version }}"
          git push origin "${{ needs.create_release_commits.outputs.swift_format_version }}"
  create_prerelease:
    name: Create prerelease on GitHub
    runs-on: ubuntu-latest
    needs: [create_release_commits, create_tag]
    # Only create a release automatically for prereleases. For real releases, release notes should be crafted by hand.
    if: ${{ github.event.inputs.prerelease }}
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Create release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create "${{ needs.create_release_commits.outputs.swift_format_version }}" \
            --title "${{ needs.create_release_commits.outputs.swift_format_version }}" \
            --prerelease
